#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
cut_highlights.py
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
1.  –°–∫–∞—á–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤—å—é (INTERVIEW_URL) —á–µ—Ä–µ–∑ yt-dlp –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
2.  –û—Ç–¥–∞—ë—Ç –∞—É–¥–∏–æ –≤ Whisper (oz –∏–ª–∏ o4-mini) –∏ –ø–æ–ª—É—á–∞–µ—Ç JSON-—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
3.  –î–µ–ª–∏—Ç –≤—ã–ø—É—Å–∫ –Ω–∞ N_SEGMENTS ‚âà –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω—ã
4.  –ö–∞–∂–¥–æ–º—É —Å–µ–≥–º–µ–Ω—Ç—É ¬´–æ–±—Ä–µ–∑–∞–µ—Ç¬ª 30 ¬± 1 —Å –∞—É–¥–∏–æ ‚á¢ scripts/audio/voice_*.mp3
"""

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
INTERVIEW_URL   = "https://www.youtube.com/watch?v=zV7lrWumc7U"   # –ø–æ–º–µ–Ω—è–π—Ç–µ
N_SEGMENTS      = 4        # 4 —à–æ—Ä—Ç–∞ ‚Üí 2 –≤ –¥–µ–Ω—å
CLIP_SEC        = 30       # –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
LEADING_SEC     = 10       # —Å–¥–≤–∏–≥, —á—Ç–æ–±—ã –Ω–µ —Ä–µ–∑–∞–ª–æ —Å–ª–æ–≤–∞
MODEL           = "whisper-1"  # –∏–ª–∏ "o4-mini"
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

import os, io, sys, json, math, shutil, subprocess, tempfile, textwrap
from pathlib import Path
import yt_dlp, httpx, mutagen
from pydub import AudioSegment
import openai

TMP = Path(tempfile.gettempdir())
AUDIO_DIR = Path(__file__).parent / "audio"
AUDIO_DIR.mkdir(exist_ok=True, parents=True)

openai_client = openai.OpenAI(api_key=os.environ["OPENAI_API_KEY"])

# ---------------------------------------------------------------------------
def download_audio(url: str) -> Path:
    """
    –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ —Ç–æ–ª—å–∫–æ _–µ—Å–ª–∏_ YouTube –æ—Ç–¥–∞–µ—Ç —Ä–æ–ª–∏–∫ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
    –ï—Å–ª–∏ –≤–∏–¥–∏–º –æ—à–∏–±–∫—É ¬´Sign-in to confirm you‚Äôre not a bot¬ª ‚Üí –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–ø—É—Å–∫.
    """
    out = TMP / "full.m4a"
    ydl_opts = {
        "format": "bestaudio[ext=m4a]/bestaudio/best",
        "outtmpl": str(out),
        "quiet": True,
        # ! –≥–ª–∞–≤–Ω–æ–µ ‚Äì –ù–ï –ø–µ—Ä–µ–¥–∞—ë–º cookies –∏ –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ª–æ–≥–∏–Ω–∏—Ç—å—Å—è
    }
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])
        return out
    except yt_dlp.utils.DownloadError as e:
        msg = str(e)
        if "Sign in to confirm" in msg or "cookies" in msg:
            # YouTube –Ω–µ –¥–∞–ª —Å–∫–∞—á–∞—Ç—å –±–µ–∑ –ª–æ–≥–∏–Ω–∞ ‚Äì –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∂–æ–± –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ
            print("‚ÑπÔ∏è  YouTube —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é ‚Äì –≤—ã–ø—É—Å–∫ –ø—Ä–æ–ø—É—â–µ–Ω")
            sys.exit(78)         # 78 = GitHub Actions ¬´neutral¬ª
        raise                    # –ª—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ ‚Äì –ø–∞–¥–∞–µ–º –∫—Ä–∞—Å–Ω—ã–º

# ---------------------------------------------------------------------------
def whisper_json(m4a: Path) -> list[dict]:
    with open(m4a, "rb") as f:
        audio = f.read()
    resp = openai_client.audio.transcriptions.create(
        file=(m4a.name, io.BytesIO(audio)),
        model=MODEL,
        response_format="verbose_json",
    )
    return json.loads(resp.json())["segments"]

# ---------------------------------------------------------------------------
def main():
    full      = download_audio(INTERVIEW_URL)
    segments  = whisper_json(full)

    # –í—ã—á–∏—Å–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏–ª–æ—Å—å N_SEGMENTS –∫–ª–∏–ø–æ–≤ ‚âà CLIP_SEC
    total_sec = mutagen.File(full).info.length
    step      = (total_sec - LEADING_SEC) / N_SEGMENTS
    borders   = [max(0, int(LEADING_SEC + i*step)) for i in range(N_SEGMENTS)]

    audio = AudioSegment.from_file(full)
    for idx, start in enumerate(borders, 1):
        clip = audio[start*1000 : (start+CLIP_SEC)*1000]
        path = AUDIO_DIR / f"voice_{idx}.mp3"
        clip.export(path, format="mp3", bitrate="128k")
        print("üîä", path.name)

    print("‚úÖ  –ì–æ—Ç–æ–≤–æ:", len(borders), "–∫–ª–∏–ø–æ–≤")

# ---------------------------------------------------------------------------
if __name__ == "__main__":
    main()
